//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.09 at 11:30:18 AM CEST 
//


package org.gbif.doi.metadata.datacite;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import com.google.common.base.Objects;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for point complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="point">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element name="pointLongitude" type="{http://datacite.org/schema/kernel-4}longitudeType"/>
 *         &lt;element name="pointLatitude" type="{http://datacite.org/schema/kernel-4}latitudeType"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "point", propOrder = {

})
public class Point {

    protected float pointLongitude;
    protected float pointLatitude;

    /**
     * Gets the value of the pointLongitude property.
     * 
     */
    public float getPointLongitude() {
        return pointLongitude;
    }

    /**
     * Sets the value of the pointLongitude property.
     * 
     */
    public void setPointLongitude(float value) {
        this.pointLongitude = value;
    }

    /**
     * Gets the value of the pointLatitude property.
     * 
     */
    public float getPointLatitude() {
        return pointLatitude;
    }

    /**
     * Sets the value of the pointLatitude property.
     * 
     */
    public void setPointLatitude(float value) {
        this.pointLatitude = value;
    }

    public static Point.Builder<Void> builder() {
        return new Point.Builder<Void>(null, null, false);
    }

    public static Point.Builder<Void> copyOf(final Point _other) {
        return new Point.Builder<Void>(null, _other, true);
    }

    public static Point.Builder<Void> copyOf(final Point _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new Point.Builder<Void>(null, _other, true, _propertyTree, _propertyTreeUse);
    }

    public static Point.Builder<Void> copyExcept(final Point _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static Point.Builder<Void> copyOnly(final Point _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(this).add("pointLongitude", pointLongitude).add("pointLatitude", pointLatitude).toString();
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(pointLongitude, pointLatitude);
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other == null) {
            return false;
        }
        if (getClass()!= other.getClass()) {
            return false;
        }
        final Point o = ((Point) other);
        return (Objects.equal(pointLongitude, o.pointLongitude)&&Objects.equal(pointLatitude, o.pointLatitude));
    }

    public static class Builder<TParentBuilder >{

        protected final TParentBuilder _parentBuilder;
        protected final Point _product;
        private float pointLongitude;
        private float pointLatitude;

        public Builder(final TParentBuilder _parentBuilder, final Point _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_copy) {
                this._product = null;
                this.pointLongitude = _other.pointLongitude;
                this.pointLatitude = _other.pointLatitude;
            } else {
                this._product = _other;
            }
        }

        public Builder(final TParentBuilder _parentBuilder, final Point _other, final boolean _copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
            this._parentBuilder = _parentBuilder;
            if (_copy) {
                this._product = null;
                final PropertyTree pointLongitudePropertyTree = ((propertyTree == null)?null:propertyTree.get("pointLongitude"));
                if (((treeUse == PropertyTreeUse.INCLUDE)?(pointLongitudePropertyTree!= null):((pointLongitudePropertyTree == null)||(!pointLongitudePropertyTree.isLeaf())))) {
                    this.pointLongitude = _other.pointLongitude;
                }
                final PropertyTree pointLatitudePropertyTree = ((propertyTree == null)?null:propertyTree.get("pointLatitude"));
                if (((treeUse == PropertyTreeUse.INCLUDE)?(pointLatitudePropertyTree!= null):((pointLatitudePropertyTree == null)||(!pointLatitudePropertyTree.isLeaf())))) {
                    this.pointLatitude = _other.pointLatitude;
                }
            } else {
                this._product = _other;
            }
        }

        public TParentBuilder end() {
            return this._parentBuilder;
        }

        protected<P extends Point >P init(final P product) {
            product.pointLongitude = this.pointLongitude;
            product.pointLatitude = this.pointLatitude;
            return product;
        }

        /**
         * Sets the new value of "pointLongitude" (any previous value will be replaced)
         * 
         * @param pointLongitude
         *     New value of the "pointLongitude" property.
         */
        public Point.Builder<TParentBuilder> withPointLongitude(final float pointLongitude) {
            this.pointLongitude = pointLongitude;
            return this;
        }

        /**
         * Sets the new value of "pointLatitude" (any previous value will be replaced)
         * 
         * @param pointLatitude
         *     New value of the "pointLatitude" property.
         */
        public Point.Builder<TParentBuilder> withPointLatitude(final float pointLatitude) {
            this.pointLatitude = pointLatitude;
            return this;
        }

        public Point build() {
            if (this._product == null) {
                return this.init(new Point());
            } else {
                return ((Point) this._product);
            }
        }

    }

    public static class Select
        extends Point.Selector<Point.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static Point.Select _root() {
            return new Point.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {


        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            return products;
        }

    }

}
